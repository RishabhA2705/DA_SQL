use mavenmovies;
#1 Rank the customers based on the total amount they've spent on rentals.
SELECT 
    c.customer_id,
    c.first_name,
    c.last_name,
    SUM(p.amount) AS total_spent,
    RANK() OVER (ORDER BY SUM(p.amount) DESC) AS spending_rank
FROM customer c
JOIN payment p 
    ON c.customer_id = p.customer_id
GROUP BY c.customer_id, c.first_name, c.last_name
ORDER BY total_spent DESC;

#2 Calculate the cumulative revenue generated by each film over time.
SELECT 
    f.title,
    p.payment_date,
    SUM(p.amount) AS daily_revenue,
    SUM(SUM(p.amount)) OVER (
        PARTITION BY f.title 
        ORDER BY p.payment_date
    ) AS cumulative_revenue
FROM film f
JOIN inventory i 
    ON f.film_id = i.film_id
JOIN rental r 
    ON i.inventory_id = r.inventory_id
JOIN payment p 
    ON r.rental_id = p.rental_id
GROUP BY f.title, p.payment_date
ORDER BY f.title, p.payment_date;

#3 Determine the average rental duration for each film, considering films with similar lengths.
SELECT 
    f.title,
    f.length AS film_length,
    AVG(DATEDIFF(r.return_date, r.rental_date)) AS avg_rental_duration
FROM film f
JOIN inventory i 
    ON f.film_id = i.film_id
JOIN rental r 
    ON i.inventory_id = r.inventory_id
GROUP BY f.title, f.length
ORDER BY f.length, f.title;

#4 Identify the top 3 films in each category based on their rental counts.
SELECT *
FROM (
    SELECT 
        c.name AS category_name,
        f.title AS film_title,
        COUNT(r.rental_id) AS rental_count,
        ROW_NUMBER() OVER (
            PARTITION BY c.name
            ORDER BY COUNT(r.rental_id) DESC
        ) AS rank_in_category
    FROM category c
    JOIN film_category fc ON c.category_id = fc.category_id
    JOIN film f ON fc.film_id = f.film_id
    JOIN inventory i ON f.film_id = i.film_id
    JOIN rental r ON i.inventory_id = r.inventory_id
    GROUP BY c.name, f.title
) ranked
WHERE rank_in_category <= 3
ORDER BY category_name, rank_in_category;

#5 Calculate the difference in rental counts between each customer's total rentals and the average rentals across all customers.
SELECT 
    c.customer_id,
    c.first_name,
    c.last_name,
    COUNT(r.rental_id) AS total_rentals,
    ROUND(AVG(COUNT(r.rental_id)) OVER (), 2) AS avg_rentals_across_customers,
    COUNT(r.rental_id) - AVG(COUNT(r.rental_id)) OVER () AS diff_from_avg
FROM customer c
JOIN rental r 
    ON c.customer_id = r.customer_id
GROUP BY c.customer_id, c.first_name, c.last_name
ORDER BY diff_from_avg DESC;

#6 Find the monthly revenue trend for the entire rental store over time.
SELECT 
    DATE_FORMAT(p.payment_date, '%Y-%m') AS month,
    SUM(p.amount) AS total_revenue
FROM payment p
GROUP BY DATE_FORMAT(p.payment_date, '%Y-%m')
ORDER BY month;

#7  Identify the customers whose total spending on rentals falls within the top 20% of all customers.
WITH customer_spending AS (
    SELECT 
        c.customer_id,
        c.first_name,
        c.last_name,
        SUM(p.amount) AS total_spent,
        PERCENT_RANK() OVER (ORDER BY SUM(p.amount)) AS spend_percentile
    FROM customer c
    JOIN payment p 
        ON c.customer_id = p.customer_id
    GROUP BY c.customer_id, c.first_name, c.last_name
)
SELECT *
FROM customer_spending
WHERE spend_percentile >= 0.80
ORDER BY total_spent DESC;

#8 Calculate the running total of rentals per category, ordered by rental count.
WITH category_rentals AS (
    SELECT 
        c.name AS category_name,
        COUNT(r.rental_id) AS rental_count
    FROM category c
    JOIN film_category fc 
        ON c.category_id = fc.category_id
    JOIN film f 
        ON fc.film_id = f.film_id
    JOIN inventory i 
        ON f.film_id = i.inventory_id
    JOIN rental r 
        ON i.inventory_id = r.inventory_id
    GROUP BY c.name
)
SELECT 
    category_name,
    rental_count,
    SUM(rental_count) OVER (ORDER BY rental_count DESC) AS running_total
FROM category_rentals
ORDER BY rental_count DESC;

#9 Find the films that have been rented less than the average rental count for their respective categories.
WITH film_rentals AS (
    SELECT 
        f.film_id,
        f.title,
        c.name AS category_name,
        COUNT(r.rental_id) AS rental_count
    FROM film f
    JOIN film_category fc 
        ON f.film_id = fc.film_id
    JOIN category c 
        ON fc.category_id = c.category_id
    JOIN inventory i 
        ON f.film_id = i.film_id
    JOIN rental r 
        ON i.inventory_id = r.inventory_id
    GROUP BY f.film_id, f.title, c.name
),
category_avg AS (
    SELECT 
        category_name,
        AVG(rental_count) AS avg_rentals
    FROM film_rentals
    GROUP BY category_name
)
SELECT 
    fr.film_id,
    fr.title,
    fr.category_name,
    fr.rental_count,
    ca.avg_rentals
FROM film_rentals fr
JOIN category_avg ca 
    ON fr.category_name = ca.category_name
WHERE fr.rental_count < ca.avg_rentals
ORDER BY fr.category_name, fr.rental_count ASC;

#10  Identify the top 5 months with the highest revenue and display the revenue generated in each month.
SELECT 
    DATE_FORMAT(p.payment_date, '%Y-%m') AS month,
    SUM(p.amount) AS total_revenue
FROM payment p
GROUP BY DATE_FORMAT(p.payment_date, '%Y-%m')
ORDER BY total_revenue DESC
LIMIT 5;









